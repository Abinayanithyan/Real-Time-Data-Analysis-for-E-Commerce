services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: docker-zookeeper-1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - ecommerce-network

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: docker-kafka-1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      #Proper listener configuration for both internal and external access
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  cassandra:
    image: cassandra:4.1
    container_name: docker-cassandra-1
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=Test Cluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - MAX_HEAP_SIZE=1G
      - HEAP_NEWSIZE=200M
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster'"]
      interval: 30s
      timeout: 10s
      retries: 8
      start_period: 60s
    volumes:
      - cassandra_data:/var/lib/cassandra
      - ../cassandra:/cassandra   # ‚Üê this makes init.cql visible inside container
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G


  spark-master:
    image: apache/spark:3.5.0-scala2.12-java11-python3-ubuntu
    container_name: docker-spark-master
    environment:
      - SPARK_NO_DAEMONIZE=1
      - HADOOP_USER_NAME=root
      - USER=root
    ports:
      - "8080:8080"
      - "7077:7077"
      - "4040:4040"  # Spark Application UI
    volumes:
      - ../spark:/spark-apps
    depends_on:
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    networks:
      - ecommerce-network
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master --host 0.0.0.0 --port 7077 --webui-port 8080

  spark-worker:
    image: apache/spark:3.5.0-scala2.12-java11-python3-ubuntu
    container_name: docker-spark-worker
    environment:
      - HADOOP_USER_NAME=root
      - USER=root
    depends_on:
      - spark-master
    networks:
      - ecommerce-network
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077

networks:
  ecommerce-network:
    driver: bridge

volumes:
  cassandra_data: